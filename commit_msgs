
-----

feat(tests): add HTML-based test UI for user and auth endpoints
-----

feat: add addresses.js frontend module to interact with address APIs

- Created addresses.js to handle API requests for address management
- Includes functions for adding, updating, deleting, and fetching addresses
- Supports both user and admin endpoints

-----

feat: add categories.html frontend module to interact with address APIs

- Created categories.js to handle API requests for address management
- Includes functions for adding, updating, deleting, and fetching addresses
- Supports both user and admin endpoints
-----

feat: add products.js module to manage product and address APIs

- Added products.js to handle API requests related to products and addresses
- Implemented functions for creating, updating, deleting, and retrieving addresses
- Integrated support for both user and admin address endpoints
- Added image upload functionality for products

-----

feat: add review.html review.js and module to manage product and address APIs

-----

Fix: Refactor order endpoints to return dicts and prevent JSON serialization errors

- Converted all SQLite row results to Python dictionaries in order-related methods.
- Fixed get_order_by_id, get_orders_by_user, and get_orders to support JSON responses correctly.
- Improved logging for better debugging of API calls.
- Ensured pagination works properly in admin order listing.
- Enabled foreign key constraints and consistent row_factory usage in database connection.
-----

feat: Add full CRUD support for order items UI

- Created order_item.html to manage order items via the browser interface.
- Implemented full CRUD operations (Create, Read, Update, Delete, and Search) in js/order_item.js.
- Added frontend form handling and dynamic table rendering for order items.
- Integrated API calls to back-end endpoints for seamless interaction.
- Improved user experience with validation and basic error handling.
-----

feat: add payment.html and js/payment.js for full payment functionality

- Created payment.html page for handling user payment input and display
- Implemented js/payment.js with full CRUD operations for payments
- Supports creating new payments, viewing existing ones, updating status, and deleting
- Integrated UI with backend payment API endpoints
- Added basic form validation and dynamic UI feedback
